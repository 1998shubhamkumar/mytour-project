0. Steps to run this project in pc:
	
	1. Download the zip file from the github
	2. Open the root folder(mytour) in vs code.
		file->open folder->select folder from location
	3. Open new terminal
		terminal->new terminal
	4. Activate virtual env in your terminal
		source env/Scripts/activate
	5. Run server 
		python manage.py runserver
	6. Open your browser and type http://127.0.0.1:8000/ in your address and enter

	7. In the same address bar type http://127.0.0.1:8000/admin and enter for admin access
		username: djangoadmin
		password: mytour@123
	Note : Before entering any commands.
		Go to mytour file -> settings.py -> line 97-> password->'mytour@123'
		Go to mytour file -> settings.py -> line 160-> password->'Gaurav@123'

1. Initially, i used git bash for the creation of related files inside the project.
	i) here i have created a vitual environment(env) from git shell for the installing of all the required packages on further 	proceding of the project.
	
	ii) before installing the required packages i'll have to activate Script(source env/Scripts/activate),
	now (pip freeze: it will show installed packages.), (first package: pip install django==3.0.7)

2. Initiated a git repository to update and track records of all the codes changes. But I don't want to push all the files on github(like media files, user authentication credentials, keys etc). So, created .gitignore file in the main path of the project. Go to 
gitignore.io and search for django, copy all the contents and paste it into the .gitignore file.
	i) for example if i don't want to push media, then paste the loction of media folder here: # pytype static type analyzer
	available in .gitignore file.

3. Now i have to make a folder called static to store all the files realted to the project.
	i) In settings.py file of mytour app: manually add path of the static files as: STATIC_ROOT = os.path.join(BASE_DIR,'static')
		STATICFILES_DIR = [
    		os.path.join(BASE_DIR,'mytour/static'),
		]
	ii) Now my task is to check the status of the static files as : python manage.py collectstatic, it will also create a seperate 		static files with "admin" support.

4. In the navbar section we've different sections : home community contact, made seperate seperate html file in folder pages. Also made base.html tobar.html navbar.html footer.html and base.html extends all three and futher home community contact extends base.html which reduces the lines of code.

5. Installed postgresql and configured for windows, it is open source so codes are easily available in public domain, beast when it comes to complex operations, SQLite does not provide an authentication system. The database file itself can be updated/read by anyone,  security features, as well as complicated configurations, are built-in PostgreSQL to protect the database, The SQLite library is less than 500kb while PostgreSQL is much larger in size and many more reasons to use postgresql.
	i) After its successful installation change the settings of dbsqlite configuration with postgresql as DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'mytour',
        'HOST': "localhost",
        'USER': 'postgres',
        'PASSWORD': 'mytour@123',
    }
}
	ii) I'll use postgre later until setup superuser for our django and make team model in models.py and make migrations from cmd and register the module in admin.py and added other funtionality like filter, thumbnails of name, links added to the names and thumbnails and all.

	iii) Now I'll make a moddle for team in model.py in pages app, (also require to install pakages of pillow and psycopg2 in virtual env). After that i can easily fill the data from django-admin panel. But i encountered with one issue: Since photo is not visible after clicking the link after uploading form django admin panel for that I'll do media file configuration in settings.py in media setting added manually section.
	iv) again after configuration we'll add urls in urls.py: 
				 	from django.conf.urls.static import static
					from django.conf import settings
					+static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)

6. Now our job is to show the data on the frontend of website: I'll go to views.py in order to receive the request in home section, dict of objects and fetch its data in home.html file using django html. Similarly for about section too.

7. Now our job is to highlight the section as user moves form one section to another and it will be done in navbar.html

8. Now I'll make a seperate app for places section, register the app in settings.py, make a folder manually for urls.py, now goto view.py and def place, now made a seperate folder place and make place.html and similarly written code as written for other pages. 

9. Now its time to create the model for our place, hence all the required models created within models.py section, register this model in admin.py. After filling all the required attributes of the model, i need one more app(django-ckeditor: it will change the styling of text area, hence installed in virtual env), register the installed app in installed app section of settings.py. Import it in models.py and use RichTextField property.

10. After adding all the required attributes for a place, I'll filled the data for a place from django-admin section.

11. Added some extra features like wise added in teams admin section, same like : search box, thumbnails, id, place_name to be clickable, filter box.

12. After adding all the information in django-admin, now its time to show the data of recommended and trending section on frontend for that i have to extract data and it will be done inside home section in views.py of pages app and after that applying for loop seperately inside trending and recommended section pushed to frontend.

13. After showing places now its time to design place_detail.html file so that after clicking on any place it will show the rest of required details in another page, for that i required id of each page, def fun place_detail in views, make place_detail.html in place folder that all thing mentioned inside path of urlpatterns inside place.urls.py. Now i fetch the details of each car using primary key as id and function get_object_or_404 inside place.views.py. Then use it further in place_detail.html.

14.After completing the task of place_details.html now its to fetch the data for place.html from django-html, for which same procedure: receive all the data into objects(see->place.views.py.def place) and after that taking dict data and using for loop we'll show on frontend of place.html.

15. Now its time to work on pagination part of the page : for that i have to code for the buttons which will be active for current page rendring. Disabled the button when no prev page available and similary disable when no next page available.

16. Now its time to work on search window, when search for any keyword like: India, it will be landed in different page of search.html. For that i have to create url for name=search in place.urls.py and then def search function in views.py. Now I'll be ready to design the search.html page. If we type any keyword then it will have to give results in the search page.For that i have written a code in place.views.py in def search : search for keyword in places if not found then it will search inside description and show the results.

17. Now its time to design our django-admin panel which match to the design of out website that feels unibody, made a file base_site.html(same name important to reflect the changes on django-admin pannel) inside templete inside new folder admin.Here, I removed the basic django-administration text with out website logo and also made it clickable which after clicking render the admin to admin-home page.

18. Now its time to design our authentication system(login+register), for that i have to create a seperate app named "accounts", then register the app in settings.py file of mytour project, at the same time created urls.py in our accounts app. Now whenever user come to accounts section, it will redirects it into accounts.urls for that i have to link that url in urls.py in mytour app. Now i come into urls.py of accounts and made a path whenever user click on login it will redirect it into views.login and in views.py def a funtion called def login. I'll do similar operations for register, logout, and dashboard as well.After that inside new folder accounts in templete I'll make four html page for login logout register dashboard. After completing the designing part, now its time to work on register.html which will create POST request after filling all the information from the user. After POST request, I must have to include (csrf_token : which will generate a unique token each time after doing POST request, since some other site can't mimic your forms -- they won't have the token and therefore can't post to your site. It provide security for our data). Now I want to show some error message if user put incorrect credential for that i have to use django-message-framework, since this funtionality is already included bydefault in django settings.py file(check django installed apps, djnaog-message-contrib), took code from django documentation and added manually inside our settings.py file. Since this code actually trigger alert trigger. For that i have to make a message.html page for bootstrap templating and again showing error messages when request it will be done inside views.py.
		I also want that this message will be disappeared for about 3-5 seconds automatically, for that i have to write code in jQuery in our root(i.e app.js file), it will be done through set timeout funtion of jQuery.....!
		I am not creating seperate model for user authentication because it will be auto created by default by django, you can check it in postgres sql table login logging into it.
		Now, its time for all the required validation for registration of user, like unique username(it check for all the username in our database), unique user-email, password checking etc. It will all done inside our def register funtion inside views.py file.
a
19. Now, I want to add the funtionalities of login/register through facebook and google+, for that i need to install a package called django-allauth in our virtual environment. Now register this package in our installed apps, also added manually (LOGIN_REDIRECT_URL='dashboard': this removes 404 error and redirect us into dashboard after successfully loggin in!), now in urls.py added (path('socialaccounts/',include('allauth.urls')),), it will create our social site under admin section. Now to add social application, i need client id, secret key for that: i need to create a account on developers page of facebook and google respectevely.
	Now after successfully setup my site application from django-admin panel, now its time to change href for facebook and google from login.html.(here i used a method js_sdk, because this method enable us to login facebook through same webpage opening in current window, another method name "oauth2", it will redirect us to new window for current login.)

20. Now, its time to work on contact/query form, when ever user create a query admin will get a mail, for that i need a seperate app. So, i will create my app from cmd, registered this app in settings.py file of root project, create a urls.py and all. Now, all i need to make a model for contact (i need 12 attributes from here see models.py for more details), also i'am checking, if user has already made a inquiry for a place, then for that i give them an alert message. Now its time for us to give admin an alert message whenever user made an inquiry for a place.

21. Deployment Phase: before deployment i need to take a backup of my database in json format: 
	for that i need to run this command(known as dump command) : python manage.py dumbdata --natural-foreign --natural-primary -e contenttype -e auth.Permission --indent 4 > project_dump.json

22. 
 